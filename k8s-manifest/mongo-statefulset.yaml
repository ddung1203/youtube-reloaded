apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None
  selector:
    role: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  replicas: 3
  selector:
    matchLabels:
      role: mongo
  template:
    metadata:
      labels:
        role: mongo
        environment: test
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-creds
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-creds
                  key: MONGO_INITDB_ROOT_PASSWORD
          command:
            - mongod
            - "--bind_ip_all"
            - "--replSet"
            - "rs-0"
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: "nfs-client"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
#
# rsconf = {
#   _id: 'rs-0',
#   members: [
#     {
#       _id: 0,
#       host: 'mongo-0.mongo.mongo.svc.cluster.local:27017'
#     },
#     {
#       _id: 1,
#       host: 'mongo-1.mongo.mongo.svc.cluster.local:27017'
#     },
#     {
#       _id: 2,
#       host: 'mongo-2.mongo.mongo.svc.cluster.local:27017'
#     }
#   ]
# };
#
# rs.initiate(rsconf);
#
# use admin;
#
# db.createUser({ user: "mongo", pwd: "mongo", roles: [ "userAdminAnyDatabase", "dbAdminAnyDatabase", "readWriteAnyDatabase" ]});
#
# -> admin role
